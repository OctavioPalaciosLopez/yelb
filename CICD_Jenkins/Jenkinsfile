pipeline{
    agent any
    options{
        skipStagesAfterUnstable()
        skipDefaultCheckout(true)
    }

    stages{
        stage('CHEKING CREDENTIALS & REPOSITORY CHANGES'){
            steps{
                sh 'rm -f ~/.dockercfg ~/.docker/config.json || true'
                checkout scm
                script{
                    List<String> changes = getChangedFilesList()
                    println ("Changed file list: " + changes)
                }
            }
        }

        stage('BUILD DOCKER IMAGE'){
            when{
                anyOf{
                    changeset "yelb-appserver/*"
                    changeset "yelb-db/*"
                    changeset "yelb-ui/*"
                }
            }
            steps{
                script{

                    app = docker.build("yelb-ui-nginx:${env.BUILD_ID}", "./yelb-ui")
                }
            }   
        }

        stage('UNIT-TEST DOCKER IMAGE'){
            when{
                anyOf{
                    changeset "yelb-appserver/*"
                    changeset "yelb-db/*"
                    changeset "yelb-ui/*"
                }
            }
            steps{
                sh '''
                    echo 'Testing Docker Image'
                    sleep 5
                    echo 'TEST SUCCESS'
                '''
            }
        }

        stage('DEPLOY IN AWS_ECR') {
            when{
                anyOf{
                    changeset "yelb-appserver/*"
                    changeset "yelb-db/*"
                    changeset "yelb-ui/*"
                }
            }
            steps {
                script{
                    docker.withRegistry('https://749295092856.dkr.ecr.us-west-1.amazonaws.com/yelb-ui-nginx', 'ecr:us-west-1:AWS_CREDENTIALS_YELB_APP') {
                        app.push()
                    }
                }
            }
        }
    }
}
@NonCPS
List<String> getChangedFilesList(){
    def changedFiles = []
    for ( changeLogSet in currentBuild.changeSets){
        for (entry in changeLogSet.getItems()){
            changedFiles.addAll(entry.affectedPaths)
        }
    }

    for(removeChars in 3){
        println(changedFiles[0].charAt(1))
        println(removeChars)
    /*    if(changedFiles[0].charAt(removeChars) == '/'){
            println(directory)
            break
            
        }else{
            directory = directory+changedFiles[0].charAt(removeChars)
        }*/
    }
    return changedFiles
}